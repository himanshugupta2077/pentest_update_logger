import sys, os, json
from datetime import datetime
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont, QColor, QPalette
import re

class PentestUpdateLogger(QMainWindow):
    def __init__(self):
        super().__init__()
        self.workspace = self.current_file = None
        self.entry_count = 0
        self.find_replace_history = []
        self.dark_mode = True
        self.last_saved_content = ""
        self.initUI()
        self.setup_autosave()
        self.prompt_workspace()

    def initUI(self):
        self.setWindowTitle('Pentest Update Logger')
        self.setGeometry(100, 100, 1200, 800)
        
        main_layout = QHBoxLayout()
        main_widget = QWidget()
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

        left_layout, right_layout = QVBoxLayout(), QVBoxLayout()
        left_widget, right_widget = QWidget(), QWidget()
        left_widget.setLayout(left_layout)
        right_widget.setLayout(right_layout)
        main_layout.addWidget(left_widget, 1)
        main_layout.addWidget(right_widget, 2)

        self.setup_left_side(left_layout)
        self.setup_right_side(right_layout)
        self.setup_menu()
        
        # Add mode switch button
        self.mode_switch = QPushButton('Switch to Light Mode')
        self.mode_switch.clicked.connect(self.toggle_mode)
        right_layout.addWidget(self.mode_switch)

        # Add copy button
        self.copy_button = QPushButton('Copy File Content')
        self.copy_button.clicked.connect(self.copy_file_content)
        right_layout.addWidget(self.copy_button)

        self.set_dark_mode()

    def setup_autosave(self):
        self.autosave_timer = QTimer(self)
        self.autosave_timer.timeout.connect(self.autosave)
        self.autosave_timer.start(1000)  # Trigger every 1000 ms (1 second)

    def autosave(self):
        current_content = self.output_text.toPlainText()
        if current_content != self.last_saved_content:
            self.save_file()
            self.last_saved_content = current_content

    def copy_file_content(self):
        content = self.output_text.toPlainText()
        QApplication.clipboard().setText(content)
        QMessageBox.information(self, "Success", "File content copied to clipboard")

    def setup_left_side(self, layout):
        project_form = QFormLayout()
        self.project_name_input = QLineEdit()
        self.pentest_day_input = QLineEdit()
        project_form.addRow("Project Name:", self.project_name_input)
        project_form.addRow("Pentest Day:", self.pentest_day_input)
        layout.addLayout(project_form)

        self.file_list = QListWidget()
        self.file_list.itemClicked.connect(self.open_file)
        layout.addWidget(QLabel("Files:"))
        layout.addWidget(self.file_list)

        layout.addWidget(QLabel("Find and Replace:"))
        fr_layout = QHBoxLayout()
        self.find_input, self.replace_input = QLineEdit(), QLineEdit()
        fr_layout.addWidget(self.find_input)
        fr_layout.addWidget(self.replace_input)
        layout.addLayout(fr_layout)

        fr_buttons = QHBoxLayout()
        for text, func in [('Find and Replace', self.find_and_replace), 
                           ('Reverse Only', self.reverse_only), 
                           ('Clear History', self.clear_history)]:
            btn = QPushButton(text)
            btn.clicked.connect(func)
            fr_buttons.addWidget(btn)
        layout.addLayout(fr_buttons)

        self.fr_table = QTableWidget(0, 3)
        self.fr_table.setHorizontalHeaderLabels(['Find', 'Replace', 'Action'])
        self.fr_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.fr_table)

    def setup_right_side(self, layout):
        self.fields = ['Testcase', 'URL', 'Location', 'Technique', 'Outcome', 'Payload']
        self.entries = {}
        for field in self.fields:
            if field == 'Outcome':
                self.entries[field] = QComboBox()
                self.entries[field].addItems(['Vulnerable', 'Not Vulnerable', 'Custom'])
                self.entries[field].setEditable(True)
                self.entries[field].setInsertPolicy(QComboBox.InsertPolicy.NoInsert)
                self.entries[field].lineEdit().setPlaceholderText(field)
            else:
                self.entries[field] = QLineEdit()
                self.entries[field].setPlaceholderText(field)
            
            field_layout = QHBoxLayout()
            field_layout.addWidget(self.entries[field])
            layout.addLayout(field_layout)

        # Add Copy Details button
        self.copy_details_button = QPushButton('Copy Details from Entry')
        self.copy_details_button.clicked.connect(self.copy_details_from_entry)
        layout.addWidget(self.copy_details_button)

        button_layout = QHBoxLayout()
        for text, func in [('Add Entry', self.add_entry), 
                           ('Save', self.save_file), 
                           ('Save As', self.save_file_as)]:
            btn = QPushButton(text)
            btn.clicked.connect(func)
            button_layout.addWidget(btn)
        layout.addLayout(button_layout)

        self.output_text = QTextEdit()
        layout.addWidget(self.output_text)

    def prompt_workspace(self):
        workspace = QFileDialog.getExistingDirectory(self, "Select Workspace Folder")
        if workspace:
            self.workspace = workspace
            self.update_file_list()
            self.load_fr_history()
            self.load_log_file()

    def load_log_file(self):
        log_file = os.path.join(self.workspace, 'pentest_log.json')
        if os.path.exists(log_file):
            with open(log_file, 'r') as f:
                log_data = json.load(f)
                self.project_name_input.setText(log_data.get('project_name', ''))
                self.pentest_day_input.setText(log_data.get('pentest_day', ''))

    def save_log_file(self):
        log_file = os.path.join(self.workspace, 'pentest_log.json')
        log_data = {
            'project_name': self.project_name_input.text(),
            'pentest_day': self.pentest_day_input.text()
        }
        with open(log_file, 'w') as f:
            json.dump(log_data, f)

    def copy_details_from_entry(self):
        entry_number, ok = QInputDialog.getInt(self, "Copy Details", "Enter the entry number:")
        if ok:
            content = self.output_text.toPlainText()
            entry_pattern = rf"Entry {entry_number}:(.*?)(?=Entry \d+:|$)"
            entry_match = re.search(entry_pattern, content, re.DOTALL)
            if entry_match:
                entry_content = entry_match.group(1).strip()
                for field, widget in self.entries.items():
                    field_pattern = rf"{field}: (.*?)(?=\n|$)"
                    field_match = re.search(field_pattern, entry_content, re.DOTALL)
                    if field_match:
                        if isinstance(widget, QComboBox):
                            index = widget.findText(field_match.group(1))
                            if index >= 0:
                                widget.setCurrentIndex(index)
                            else:
                                widget.setCurrentText(field_match.group(1))
                        else:
                            widget.setText(field_match.group(1))
            else:
                QMessageBox.warning(self, "Warning", f"Entry {entry_number} not found.")

    def setup_menu(self):
        menubar = self.menuBar()
        file_menu = menubar.addMenu('File')
        open_workspace_action = file_menu.addAction('Open Workspace')
        open_workspace_action.triggered.connect(self.open_workspace)

    def set_dark_mode(self):
        self.dark_mode = True
        self.mode_switch.setText('Switch to Light Mode')
        self.setStyleSheet("""
            QMainWindow, QWidget { background-color: #000000; color: #00FF00; }
            QLineEdit, QTextEdit, QComboBox { 
                background-color: #0A0A0A; 
                color: #00FF00; 
                border: 1px solid #00FF00; 
                border-radius: 5px; 
                padding: 2px;
            }
            QLineEdit:focus, QTextEdit:focus, QComboBox:focus { 
                border: 2px solid #00FF00; 
            }
            QPushButton { 
                background-color: #0A0A0A; 
                color: #00FF00; 
                border: 1px solid #00FF00; 
                border-radius: 5px;
                padding: 5px; 
            }
            QPushButton:hover { background-color: #00FF00; color: #000000; }
            QTableWidget { background-color: #0A0A0A; color: #00FF00; gridline-color: #00FF00; }
            QHeaderView::section { background-color: #0A0A0A; color: #00FF00; border: 1px solid #00FF00; }
            QTableWidget QTableCornerButton::section { background-color: #0A0A0A; border: 1px solid #00FF00; }
            QScrollBar:vertical, QScrollBar:horizontal { background-color: #0A0A0A; }
            QScrollBar::handle:vertical, QScrollBar::handle:horizontal { background-color: #00FF00; }
            QMenu { background-color: #0A0A0A; color: #00FF00; border: 1px solid #00FF00; }
            QMenu::item:selected { background-color: #00FF00; color: #000000; }
        """)

    def set_light_mode(self):
        self.dark_mode = False
        self.mode_switch.setText('Switch to Dark Mode')
        self.setStyleSheet("""
            QMainWindow, QWidget { background-color: #F0F0F0; color: #000000; }
            QLineEdit, QTextEdit, QComboBox { 
                background-color: #FFFFFF; 
                color: #000000; 
                border: 1px solid #C0C0C0; 
                border-radius: 5px;
                padding: 2px;
            }
            QLineEdit:focus, QTextEdit:focus, QComboBox:focus { 
                border: 2px solid #4A90E2; 
            }
            QPushButton { 
                background-color: #E0E0E0; 
                color: #000000; 
                border: 1px solid #C0C0C0; 
                border-radius: 5px;
                padding: 5px; 
            }
            QPushButton:hover { background-color: #D0D0D0; }
            QTableWidget { background-color: #FFFFFF; color: #000000; }
            QHeaderView::section { background-color: #E0E0E0; color: #000000; }
            QTableWidget QTableCornerButton::section { background-color: #E0E0E0; }
        """)

    def toggle_mode(self):
        if self.dark_mode:
            self.set_light_mode()
        else:
            self.set_dark_mode()

    def open_workspace(self):
        self.workspace = QFileDialog.getExistingDirectory(self, "Select Workspace Folder")
        if self.workspace:
            self.update_file_list()
            self.load_fr_history()

    def update_file_list(self):
        self.file_list.clear()
        if self.workspace:
            self.file_list.addItems([f for f in os.listdir(self.workspace) if f.endswith('.txt')])

    def add_entry(self):
        if self.current_file:
            with open(self.current_file, 'r') as f:
                content = f.read()
                self.entry_count = max([int(m.group(1)) for m in re.finditer(r'Entry (\d+):', content)] or [0]) + 1
        else:
            self.entry_count += 1

        entry = f"Entry {self.entry_count}:\n" + '\n'.join(f"{field}: {widget.currentText() if isinstance(widget, QComboBox) else widget.text()}" for field, widget in self.entries.items() if (isinstance(widget, QComboBox) and widget.currentText()) or (isinstance(widget, QLineEdit) and widget.text())) + "\n\n"
        self.output_text.append(entry)
        for widget in self.entries.values():
            if isinstance(widget, QComboBox):
                widget.setCurrentIndex(0)
            else:
                widget.clear()
        
        # Trigger autosave
        self.autosave()

    def save_file(self):
        if not self.current_file:
            self.save_file_as()
        else:
            try:
                with open(self.current_file, 'w') as f:
                    f.write(self.output_text.toPlainText())
                print("File saved successfully")
                self.save_log_file()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to save file: {str(e)}")

    def save_file_as(self):
        if not self.workspace:
            QMessageBox.warning(self, "Warning", "Please open a workspace first.")
            return

        self.project_name, self.pentest_day = self.project_name_input.text(), self.pentest_day_input.text()
        if not self.project_name or not self.pentest_day:
            QMessageBox.warning(self, "Warning", "Please enter both Project Name and Pentest Day.")
            return

        filename = f"{self.project_name}_{self.pentest_day}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        file_path = os.path.join(self.workspace, filename)

        try:
            with open(file_path, 'w') as f:
                f.write(self.output_text.toPlainText())
            self.current_file = file_path
            self.update_file_list()
            QMessageBox.information(self, "Success", f"File saved as {filename}")
            self.save_log_file()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to save file: {str(e)}")

    def open_file(self, item):
        if self.workspace:
            file_path = os.path.join(self.workspace, item.text())
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
                for find_text, replace_text in reversed(self.find_replace_history):
                    content = content.replace(replace_text, find_text)
                self.output_text.setPlainText(content)
                self.current_file = file_path
                self.last_saved_content = content  # Update last saved content
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to open file: {str(e)}")

    def find_and_replace(self):
        find_text, replace_text = self.find_input.text(), self.replace_input.text()
        if not find_text or not replace_text:
            QMessageBox.warning(self, "Warning", "Please enter both find and replace text.")
            return

        content = self.output_text.toPlainText().replace(find_text, replace_text)
        self.output_text.setPlainText(content)
        self.find_replace_history.append((find_text, replace_text))
        self.update_fr_table()
        self.save_fr_history()
        self.autosave()  # Trigger autosave after find and replace

    def reverse_only(self):
        content = self.output_text.toPlainText()
        for find_text, replace_text in reversed(self.find_replace_history):
            content = content.replace(replace_text, find_text)
        self.output_text.setPlainText(content)
        self.autosave()  # Trigger autosave after reverse

    def clear_history(self):
        self.find_replace_history.clear()
        self.update_fr_table()
        self.save_fr_history()

    def update_fr_table(self):
        self.fr_table.setRowCount(len(self.find_replace_history))
        for i, (find_text, replace_text) in enumerate(self.find_replace_history):
            self.fr_table.setItem(i, 0, QTableWidgetItem(find_text))
            self.fr_table.setItem(i, 1, QTableWidgetItem(replace_text))
            reverse_button = QPushButton('Reverse')
            reverse_button.clicked.connect(lambda _, row=i: self.reverse_single(row))
            self.fr_table.setCellWidget(i, 2, reverse_button)

    def reverse_single(self, row):
        find_text, replace_text = self.find_replace_history[row]
        content = self.output_text.toPlainText().replace(replace_text, find_text)
        self.output_text.setPlainText(content)
        self.find_replace_history.pop(row)
        self.update_fr_table()
        self.save_fr_history()

    def save_fr_history(self):
        if self.workspace:
            with open(os.path.join(self.workspace, 'fr_history.json'), 'w') as f:
                json.dump(self.find_replace_history, f)

    def load_fr_history(self):
        if self.workspace:
            history_file = os.path.join(self.workspace, 'fr_history.json')
            if os.path.exists(history_file):
                with open(history_file, 'r') as f:
                    self.find_replace_history = json.load(f)
                self.update_fr_table()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    palette = QPalette()
    palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.ColorRole.WindowText, Qt.GlobalColor.white)
    palette.setColor(QPalette.ColorRole.Base, QColor(25, 25, 25))
    palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ColorRole.ToolTipBase, Qt.GlobalColor.white)
    palette.setColor(QPalette.ColorRole.ToolTipText, Qt.GlobalColor.white)
    palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.white)
    palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.white)
    palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
    palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
    palette.setColor(QPalette.ColorRole.Highlight, QColor(42, 130, 218))
    palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.black)
    app.setPalette(palette)
    app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da; border: 1px solid white; }")
    ex = PentestUpdateLogger()
    ex.show()
    sys.exit(app.exec())